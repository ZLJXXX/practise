从零实现一个高并发的内存池
1.什么是内存池
1.1 池化技术
池 是在计算机技术中经常使用的一种设计模式，其内涵在于：将程序中需要经常使用的核心资源先申请出
来，放到一个池内，由程序自己管理，这样可以提高资源的使用效率，也可以保证本程序占有的资源数量。
经常使用的池技术包括内存池、线程池和连接池等，其中尤以内存池和线程池使用最多。
1.2 内存池
内存池(Memory Pool) 是一种动态内存分配与管理技术。 通常情况下，程序员习惯直接使用 new、
delete、malloc、free 等API申请分配和释放内存，这样导致的后果是：当程序长时间运行时，由于所申请
内存块的大小不定，频繁使用时会造成大量的内存碎片从而降低程序和操作系统的性能。内存池则是在真正
使用内存之前，先申请分配一大块内存(内存池)留作备用，当程序员申请内存时，从池中取出一块动态分
配，当程序员释放内存时，将释放的内存再放入池内，再次申请池可以 再取出来使用，并尽量与周边的空闲
内存块合并。若内存池不够时，则自动扩大内存池，从操作系统中申请更大的内存池。
2. 为什么需要内存池？
2.1 内存碎片问题
假设系统依次分配了16byte、8byte、16byte、4byte，还剩余8byte未分配。这时要分配一个24byte的空
间，操作系统回收了一个上面的两个16byte，总的剩余空间有40byte，但是却不能分配出一个连续24byte的
空间，这就是内存碎片问题。
2.2 申请效率的问题
例如：我们上学家里给生活费一样，假设一学期的生活费是6000块。
方式1：开学时6000块直接给你，自己保管，自己分配如何花。
方式2：每次要花钱时，联系父母，父母转钱。
同样是6000块钱，第一种方式的效率肯定更高，因为第二种方式跟父母的沟通交互成本太高了。
同样的道理，程序就像是上学的童鞋，操作系统就像父母，频繁申请内存的场景下，每次需要内存，都像系
统申请效率必然有影响。
3.内存池设计的演进
3.1 教科书上的内存分配器：
做一个链表指向空闲内存，分配就是取出一块来，改写链表，返回，释放就是放回到链表里面，并做好归
并。注意做好标记和保护，避免二次释放，还可以花点力气在如何查找最适合大小的内存快的搜索上，减少
内存碎片，有空你了还可以把链表换成伙伴算法。
优点：实现简单
缺点：分配时搜索合适的内存块效率低，释放回归内存后归并消耗大，实际中不实用。
3.2 定长内存分配器：
比特科技
即实现一个 FreeList，每个 FreeList 用于分配固定大小的内存块，比如用于分配 32字节对象的固定内存分配
器，之类的。每个固定内存分配器里面有两个链表，OpenList 用于存储未分配的空闲对象，CloseList用于存
储已分配的内存对象，那么所谓的分配就是从 OpenList 中取出一个对象放到 CloseList 里并且返回给用户，
释放又是从 CloseList 移回到 OpenList。分配时如果不够，那么就需要增长 OpenList：申请一个大一点的内
存块，切割成比如 64 个相同大小的对象添加到 OpenList中。这个固定内存分配器回收的时候，统一把先前
向系统申请的内存块全部还给系统。
优点：简单粗暴，200行代码就可以搞定，分配和释放的效率高，解决实际中特定场景下的问题有效。
缺点：功能单一，只能解决定长的内存需求，另外占着内存没有释放。
范例：一个简单O(1)定长内存池实现 ps:这个例子更丰富一下，下面会讲一个简化版本，让大家理解一下。
