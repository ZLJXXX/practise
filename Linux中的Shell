什么是Shell
　　Shell是命令解释器(command interpreter)，是Unix操作系统的用户接口，程序从用户接口得到输入信息，shell将用户程序及其输入翻译成操作系统内核（kernel）能够识别的指令，并且操作系统内核执行完将返回的输出通过shell再呈现给用户，下图所示用户、shell和操作系统的关系：



 

　　Shell也是一门编程语言，即shell脚本，shell是解释执行的脚本语言，可直接调用linux命令。 .java -> .class

　　一个系统可以存在多个shell，可以通过cat /etc/shells命令查看系统中安装的shell，不同的shell可能支持的命令语法是不相同的。

 

Shell种类
　　操作系统内核（kernel）与shell是独立的套件，而且都可被替换。不同的操作系统使用不同的shell；同一个kernel之上可以使用不同的shell。

　　常见的shell分为两大主流：

　　sh：

　　　　Bourne shell（sh） ,Solaris,hpux默认shell

　　　　Bourne again shell（bash） ,Linux系统默认shell

　　csh：

　　　　C shell(csh)

　　　　tc shell(tcsh)

 

查看使用Shell
 

 

Shell环境定义
临时环境变量
　　所谓临时变量是指在用户在当前登陆环境生效的变量，用户登陆系统后，直接在命令行上定义的环境变量便只能在当前的登陆环境中使用。当退出系统后，环境变量将不能下次登陆时继续使用。

将环境变量永久生效
　　通过将环境变量定义写入到配置文件中，用户每次登陆时系统自动定义，则无需再到命令行重新定义。定义环境变量的常见配置文件如下：

　　　　/etc/profile  针对系统所有用户生效，此文件应用于所有用户每次登陆系统时的环境变量定义

　　　　$HOME_name/.bash_profile  针对特定用户生效，$HOME为用户的宿主目录，当用户登陆系统后，首先继承/etc/profile文件中的定义，

　　再应用$HOME/.bash_profile文件中的定义。

系统预定义的环境变量
　　系统环境变量对所有用户有效，如：PATH、HOME、SHELL、PWD等等，如下用echo命令打印上述的系统环境变量：



 

 

 

shell脚本编程
　　同传统的编程语言一样，shell提供了很多特性，这些特性可以使你的shell脚本编程更为有用。

创建Shell脚本
　　一个shell脚本通常包含如下部分：

　　首行
　　　　第一行内容在脚本的首行左侧，表示脚本将要调用的shell解释器，内容如下：

　　　　#!/bin/bash

　　　　#！符号能够被内核识别成是一个脚本的开始，这一行必须位于脚本的首行，/bin/bash是bash程序的绝对路径，在这里表示后续的内容将通过bash程序解释执行。

　　注释
　　　　注释符号# 放在需注释内容的前面，如下：



　　内容
　　　　可执行内容和shell结构

 

 
Shell脚本的权限
　　一般情况下，默认创建的脚本是没有执行权限的。



　　没有权限不能执行，需要赋予可执行权限。



 

 

Shell脚本的执行
　　1，输入脚本的绝对路径或相对路径
　　　　/root/helloWorld.sh

　　　　./helloWorld.sh

　　2，bash或sh +脚本
　　　　bash /root/helloWorld.sh

　　　　sh helloWorld.sh

　　　　注：当脚本没有x权限时，root和文件所有者通过该方式可以正常执行。



　　3，在脚本的路径前再加". " 或source
　　　　source /root/helloWorld.sh

　　　　. ./helloWorld.sh

　　区别：第一种和第二种会新开一个bash，不同bash中的变量无法共享。但是使用. ./脚本.sh 这种方式是在同一个shell里面执行的。



 

Shell变量
　　变量：是shell传递数据的一种方式，用来代表每个取值的符号名。当shell脚本需要保存一些信息时，如一个文件名或是一个数字，就把它存放在一个变量中。

变量设置规则：
　　1，变量名称可以由字母，数字和下划线组成，但是不能以数字开头，环境变量名建议大写，便于区分。

　　2，在bash中，变量的默认类型都是字符串型，如果要进行数值运算，则必须指定变量类型为数值型。

　　3，变量用等号连接值，等号左右两侧不能有空格。

　　4，变量的值如果有空格，需要使用单引号或者双引号包括。

变量分类
　　Linux Shell中的变量分为用户自定义变量,环境变量，位置参数变量和预定义变量。可以通过set命令查看系统中存在的所有变量。

　　系统变量：保存和系统操作环境相关的数据。HOME、PWD、SHELL、USER等等

　　位置参数变量：主要用来向脚本中传递参数或数据，变量名不能自定义，变量作用固定。

　　预定义变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。

用户自定义变量
　　用户自定义的变量由字母或下划线开头，由字母，数字或下划线序列组成，并且大小写字母意义不同，变量名长度没有限制。

设置变量
　　习惯上用大写字母来命名变量。变量名以字母表示的字符开头，不能用数字。

变量调用
　　在使用变量时，要在变量名前加上前缀“$”.

　　使用echo 命令查看变量值。eg:echo $A

变量赋值
　　1，定义时赋值：

　　　　变量＝值　　　　　　等号两侧不能有空格

　　　　eg:

　　　　　　STR="hello world"

　　　　　　A=9 

　　2， 将一个命令的执行结果赋给变量
　　　　A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A

　　　　A=$(ls -la) 等价于反引号

　　　　　　eg:  aa=$((4+5))

　　　　　　　　bb=`expr 4 + 5 `

　　3，将一个变量赋给另一个变量
　　　　eg : A=$STR

变量叠加
　　eg:#aa=123

　　eg:#cc="$aa"456

　　eg:#dd=${aa}789

 

　　单引号和双引号的区别：

　　现象：单引号里的内容会全部输出，而双引号里的内容会有变化

　　原因：单引号会将所有特殊字符脱意

　　NUM=10    

　　SUM="NUMhehe"echoSUM     输出10 hehe

　　SUM2='NUMhehe′echoSUM2    输出$NUM hehe

列出所有的变量
　　set

删除变量
　　unset  NAME

　　　　eg :

　　　　　　# unset A 撤销变量 A

　　　　　　# readonly B=2 声明静态的变量 B=2 ，不能 unset

 

　　用户自定义的变量，作用域为当前的shell环境。

 

环境变量
 

　　用户自定义变量只在当前的shell中生效，而环境变量会在当前shell和其所有子shell中生效。如果把环境变量写入相应的配置文件，那么这个环境变量就会在所有的shell中生效。

 

　　export 变量名=变量值   申明变量

　　作用域：当前shell以及所有的子shell。

 

位置参数变量
$n

n为数字，0代表命令本身，1-$9代表第一到第9个参数,

十以上的参数需要用大括号包含，如${10}。

$*

代表命令行中所有的参数，把所有的参数看成一个整体。以"12 … $n"的形式输出所有参数

$@

代表命令行中的所有参数，把每个参数区分对待。以"1""2" … "$n" 的形式输出所有参数

$#

代表命令行中所有参数的个数。添加到shell的参数个数

　　shift指令：参数左移，每执行一次，参数序列顺次左移一个位置，$# 的值减1，用于分别处理每个参数，移出去的参数不再可用

　　$* 和 $@的区别

　　1，∗和@ 都表示传递给函数或脚本的所有参数，不被双引号" "包含时，都以"1""2" … "$n" 的形式输出所有参数；

　　2，当它们被双引号" "包含时，"∗"会将所有的参数作为一个整体，以"1 2…n"的形式输出所有参数；

　　3，"@"会将各个参数分开，以"1" "2"…"n" 的形式输出所有参数。

　　

 预定义变量
$? 

执行上一个命令的返回值   执行成功，返回0，执行失败，返回非0（具体数字由命令决定）

$$

当前进程的进程号（PID），即当前脚本执行时生成的进程号

$!

后台运行的最后一个进程的进程号（PID），最近一个被放入后台执行的进程   &

 

read命令
　　read [选项] 值

　　read -p(提示语句) -n(字符个数) -t(等待时间，单位为秒) –s(隐藏输入)  

　　　　eg:

　　　　　　read –t 30 –p “please input your name: ” NAME

　　　　　　echo $NAME

　　　　　　read –s –p “please input your age : ” AGE

　　　　　　echo $AGE

　　　　　　read –n 1 –p “please input your sex  [M/F]: ” GENDER

　　　　　　echo $GENDER
