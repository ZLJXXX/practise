socket(套接字)
基于tcp协议的socket
tcp是基于链接的，必须先启动服务端，然后再启动客户端去链接服务端

server端
复制代码
import socket
sk = socket.socket()
sk.bind(('127.0.0.1',8898))  #把地址绑定到套接字
sk.listen()          #监听链接
conn,addr = sk.accept() #接受客户端链接
ret = conn.recv(1024)  #接收客户端信息
print(ret)       #打印客户端信息
conn.send(b'hi')        #向客户端发送信息
conn.close()       #关闭客户端套接字
sk.close()        #关闭服务器套接字(可选)
复制代码
client端
复制代码
import socket
sk = socket.socket()           # 创建客户套接字
sk.connect(('127.0.0.1',8898))    # 尝试连接服务器
sk.send(b'hello!')
ret = sk.recv(1024)         # 对话(发送/接收)
print(ret)
sk.close()            # 关闭客户套接字
复制代码
问题：有时重启服务端可能会遇到


解决办法：

复制代码
#加入一条socket配置，重用ip和端口
import socket
from socket import SOL_SOCKET,SO_REUSEADDR
sk = socket.socket()
sk.setsockopt(SOL_SOCKET,SO_REUSEADDR,1) #就是它，在bind前加
sk.bind(('127.0.0.1',8898))  #把地址绑定到套接字
sk.listen()          #监听链接
conn,addr = sk.accept() #接受客户端链接
ret = conn.recv(1024)   #接收客户端信息
print(ret)              #打印客户端信息
conn.send(b'hi')        #向客户端发送信息
conn.close()       #关闭客户端套接字
sk.close()        #关闭服务器套接字(可选)
复制代码
完成一个socket实现的小程序：

能够实现和同桌之间的通信
能够实现自己向发送的任意内容
能够和你的同桌聊任意多句话,并设置退出
server端

复制代码
import socket
sk = socket.socket()   # 创建一个对象
sk.bind(('127.0.0.1',9001))  # 绑定一个服务器的地址  192.168.16.46
sk.listen()  # 开始接受客户端给我连接
conn,addr = sk.accept()  # 阻塞 直到有人连我
while True:
    conn.send(b'hello')  # 发送内容
    msg = conn.recv(1024) # 收信
    if msg.decode('utf-8') == 'tuichu':
        conn.send("tuichu".encode("utf-8"))
        break
        conn.close()  # 关闭连接
        sk.close()  # 关闭服务器
    print(msg.decode("utf-8"))
复制代码
client端

复制代码
import socket
sk = socket.socket() # 创建socket对象
sk.connect(('127.0.0.1',9001)) # 绑定连接server端的地址
while True:
    msg = sk.recv(1024)  # 接收服务器发来的信息
    print(msg.decode('utf-8'))  # 解码并打印消息内容
    if msg.decode('utf-8') == 'tuichu':
        break
        sk.close()  # 关机
    choice = input('请输入您要发送的内容>>>:')
    sk.send(choice.encode('utf-8'))
复制代码
 基于udp协议的socket
udp是无链接的，启动服务之后可以直接接受消息，不需要提前建立链接

server端

复制代码
import socket
udp_sk = socket.socket(type=socket.SOCK_DGRAM)   #创建一个服务器的套接字
udp_sk.bind(('127.0.0.1',9000))        #绑定服务器套接字
msg,addr = udp_sk.recvfrom(1024)
print(msg)
udp_sk.sendto(b'hi',addr)                 # 对话(接收与发送)
udp_sk.close()                         # 关闭服务器套接字
复制代码
client端

复制代码
import socket
ip_port=('127.0.0.1',9000)
udp_sk=socket.socket(type=socket.SOCK_DGRAM)
udp_sk.sendto(b'hello',ip_port)
back_msg,addr=udp_sk.recvfrom(1024)
print(back_msg.decode('utf-8'),addr)
复制代码
 socket更多方法介绍
复制代码
服务端套接字函数
s.bind()    绑定(主机,端口号)到套接字
s.listen()  开始TCP监听
s.accept()  被动接受TCP客户的连接,(阻塞式)等待连接的到来

客户端套接字函数
s.connect()     主动初始化TCP服务器连接
s.connect_ex()  connect()函数的扩展版本,出错时返回出错码,而不是抛出异常

公共用途的套接字函数
s.recv()            接收TCP数据
s.send()            发送TCP数据
s.sendall()         发送TCP数据
s.recvfrom()        接收UDP数据
s.sendto()          发送UDP数据
s.getpeername()     连接到当前套接字的远端的地址
s.getsockname()     当前套接字的地址
s.getsockopt()      返回指定套接字的参数
s.setsockopt()      设置指定套接字的参数
s.close()           关闭套接字

面向锁的套接字方法
s.setblocking()     设置套接字的阻塞与非阻塞模式
s.settimeout()      设置阻塞套接字操作的超时时间
s.gettimeout()      得到阻塞套接字操作的超时时间

面向文件的套接字的函数
s.fileno()          套接字的文件描述符
s.makefile()        创建一个与该套接字相关的文件
